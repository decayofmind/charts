---

replicaCount: 1

extraLabels: {}

image:
  # see https://codeberg.org/hjacobs/kube-web-view/releases
  repository: hjacobs/kube-web-view
  tag: 20.10.0
  pullPolicy: IfNotPresent

args: []
  # - "--show-container-logs"
  # - "--show-secrets"
  # - "--oauth2-authorized-hook=hooks.oauth2_authorized"

config:
  main: {}
    # OAUTH2_AUTHORIZE_URL: https://server.com/auth?scope=email%20groups%20openid%20profile
    # OAUTH2_ACCESS_TOKEN_URL: https://server.com/token
    # OAUTH2_ALLOWED_GROUP: ACL-KUBE-WEB-VIEW
    # OAUTH2_CLIENT_ID: kube-web-view
  secret: {}
    # OAUTH2_CLIENT_SECRET: client_secret
    # SESSION_SECRET_KEY: session_secret

hooks: ''
# hooks: |-
#   import base64
#   import json
#   import logging
#   import os

#   async def oauth2_authorized(data: dict, session):
#       token = data["id_token"]
#       header, payload, signature = token.split(".")
#       decoded = base64.b64decode(payload + "=" * ((4 - len(payload) % 4) % 4)).decode(
#           "utf-8"
#       )

#       payload_data = json.loads(decoded)

#       user = payload_data['email']
#       groups = payload_data['groups']

#       allowed_group = os.getenv("OAUTH2_ALLOWED_GROUP")

#       if allowed_group and allowed_group in groups:
#         logging.info(f"User {user} was logged in")
#         return True

service:
  internalPort: 8080
  externalPort: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  hosts:
    - host: chart-example.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

securityContext:
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

resources:
  limits:
    memory: 100Mi
  requests:
    cpu: 5m
    memory: 100Mi

nginx-ldapauth-proxy:
  enabled: false
  proxy:
    port: 80
    host: "kube-web-view"
